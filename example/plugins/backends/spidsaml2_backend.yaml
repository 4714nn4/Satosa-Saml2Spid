module: backends.spidsaml2.SpidSAMLBackend
# module: backends.spidsaml2.SAMLBackend

name: spidSaml2
config:
  #idp_blacklist_file: /path/to/blacklist.json
  # make metadata downloadable from entityid url
  entityid_endpoint: true

  sp_config:

    key_file: ./pki/backend.key
    cert_file: ./pki/backend.cert
    encryption_keypairs:
    - {'key_file': ./pki/backend.key, 'cert_file': ./pki/backend.cert}

    attribute_map_dir: 'attributes-map'

    organization: {display_name: testUnical, name: testUnical, url: 'http://www.testunical.it'}
    contact_person:
    - {contact_type: technical, email_address: technical@example.com, given_name: Technical}
    - {contact_type: support, email_address: support@example.com, given_name: Support}

    metadata:
      # if mdq I get in djangosaml2 "SignatureError at /saml2/acs/: Signature missing for response"
      # probably some data is lost in metadata catalogue
      local: [./metadata/idpspid1.xml]
      # using pyFF or other MDX server
      # mdq:
        # - url: "http://sp1.testunical:8001/"
          # cert: ukfederation-mdq.pem

    entityid: '<base_url>/<name>/metadata'
    accepted_time_diff: 60
    valid_for: 1200 #10 days

    service:
      sp:
        ui_info:
          display_name:
            - lang: en
              text: "Unical SPID authentication proxy"
          description:
            - lang: en
              text: "Unical SPID authentication proxy"
          information_url:
            - lang: en
              text: "http://sp.information.url/"
          privacy_statement_url:
            - lang: en
              text: "http://sp.privacy.url/"
          keywords:
            - lang: it
              text: ["Unical SPID authentication proxy", "SP-IT"]
            - lang: en
              text: ["Unical SPID authentication proxy", "SP-EN"]
          logo:
            text: "http://sp.logo.url/"
            width: "100"
            height: "100"

        # sign dig and enc
        authn_requests_signed: true
        want_response_signed: true
        # they works both with ppln-dev branch
        # sign_alg: 'SIG_RSA_SHA384'
        # digest_alg: 'DIGEST_SHA384'
        sign_alg: "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"
        digest_alg: "http://www.w3.org/2001/04/xmlenc#sha256"

        # security
        only_use_keys_in_metadata: true

        force_authn: false
        name_id_format_allow_create: false
        name_id_format: 'urn:oasis:names:tc:SAML:2.0:nameid-format:transient'
        allow_unknown_attributes: true
        allow_unsolicited: false

        # this instantiate the attribute_consuming_service
        required_attributes: ['spidCode',
                              'name',
                              'familyName',
                              'fiscalNumber',
                              'email']

        optional_attributes: ['gender',
                              'companyName',
                              'registeredOffice',
                              'ivaCode',
                              'idCard',
                              'digitalAddress',
                              'placeOfBirth',
                              'countyOfBirth',
                              'dateOfBirth',
                              'address',
                              'mobilePhone',
                              'expirationDate']

        endpoints:
          assertion_consumer_service:
          - [<base_url>/<name>/acs/post, 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST']
          single_logout_service:
          - [<base_url>/<name>ls/post/, 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST']
          discovery_response:
          - [<base_url>/<name>/disco, 'urn:oasis:names:tc:SAML:profiles:SSO:idp-discovery-protocol']

  # disco_srv must be defined if there is more than one IdP in the metadata specified above
  # it uses pyFF
  disco_srv: "http://sp1.testunical.it:8001/role/idp.ds"
